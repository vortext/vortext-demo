#!/usr/bin/env python

import os, logging, optparse, time, signal, sys
from worker import MajorDomoWorker

def str2bool(v):
  return v.lower() in ("yes", "true", "t", "1")

DEBUG_MODE = str2bool(os.environ.get("DEBUG", "true"))
VERSION = os.environ.get("VERSION", "<I HAVE NO MASTER>")
LOG_LEVEL = (logging.DEBUG if DEBUG_MODE else logging.INFO)
logging.basicConfig(level=LOG_LEVEL, format='[%(levelname)s] %(name)s %(asctime)s: %(message)s')
log = logging.getLogger(__name__)

def destroy(signum, frame):
    log.warn("received %s shutting down..." % (signum))
    sys.exit(0)

signal.signal(signal.SIGINT, destroy)
signal.signal(signal.SIGTERM, destroy)

def run_server(options, handler):
    worker = MajorDomoWorker(options, DEBUG_MODE)
    reply = None
    while True:
        request = worker.recv(reply)
        if request is None:
            break  # Worker was interrupted
        try:
            reply = handler.handle(request)
        except:
            continue

def main():
    p = optparse.OptionParser(
        description="Runs the handler from the module as a worker process on the specified socket.",
        version="%s" % (VERSION))
    p.add_option('--module', '-m')
    p.add_option('--socket', '-s')
    p.add_option('--reconnect', default=2500, type="int")
    p.add_option('--timeout', default=2500, type="int")
    p.add_option('--heartbeat', default=2500, type="int")
    p.add_option('--name', '-n', help="Service name")
    p.add_option('--path', '-p', default="../../topologies", help="Path where to look for modules")

    # For stand alone usage
    p.add_option('--input', help="Run the specified worker once on the input file, useful for testing and debugging")
    p.add_option('--output', help="Path where to write the output when called with --input")

    options, arguments = p.parse_args()

    sys.path.append(options.path)
    mod = __import__(options.module, fromlist=['Handler'])
    h = getattr(mod, 'Handler')

    handler = h()

    if(options.input):
      with open(options.input, 'r') as f:
        contents = f.read()
        if(options.output):
          with open(options.output, "w") as output_file:
            output_file.write(handler.handle(contents))
        else:
          print handler.handle(contents)
    else:
      log.info("responding to Spa version %s on %s" % (VERSION, options.socket))
      run_server(options, handler)

if __name__ == '__main__':
    main()
