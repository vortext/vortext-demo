#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var Q = require('q');
var path_module = require('path');
var Worker = require('./worker.js');

program
  .version(process.env.VERSION || "<I HAVE NO MASTER>")
  .option('-m, --module [module]', 'Module to use as handler for messages')
  .option('-s, --socket [socket]', 'ZeroMQ socket to listen on')
  .option('-n, --name [name]', 'Service name')
  .option('--timeout [timeout]', 'Maximum task duration before giving up', parseInt)
  .option('--heartbeat [heartbeat]', 'Sent a heartbeat every [heartbeat] milliseconds', parseInt)
  .option('--reconnect [reconnect]', 'Attempt to reconnect to disconnected broker after [reconnect] milliseconds', parseInt)
  .option('-p, --path [path]', 'Path to the module directory', path_module.join(__dirname, '../../topologies'))
  .option('--input [input]', 'Runs the specified handler once on the specified file, useful for testing and debugging')
  .option('--output [output]', 'Path to the output file if called with --input')
  .parse(process.argv);


var path = path_module.join(program.path, program.module);
var handler = require(path);

function runServer(handler) {
  var p = program;
  var worker = new Worker(p.socket, p.name, p.timeout, p.heartbeat, p.reconnect);
  worker.start();

  worker.on('request', function(req, rep) {
    var result;
    try {
      result = handler(req);
      Q.when(result, function(data) {
        rep.reply(data);
      }, function(err) {
	      console.error("Failed to process", err);
      });
    } catch (err) {
      console.error("Failed to process", err);
      result = {}
    }
  });

}

/* --------------------
 For stand-alone usage.
 --------------------- */
if(program.input) {
  function flush(data, out) {
    if(out) {
      fs.writeFile(out, data);
    } else {
      console.log(data);
    }
  }

  var input = fs.readFileSync(program.input);
  var out = program.output;
  var result = handler(input);
  Q.when(result, function(result) {
    flush(result, out);
  });
} else {
  runServer(handler);
}
